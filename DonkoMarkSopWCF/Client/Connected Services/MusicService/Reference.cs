//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MusicService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class MyException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Music", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Music : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint DislikeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint LikeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Dislike {
            get {
                return this.DislikeField;
            }
            set {
                if ((this.DislikeField.Equals(value) != true)) {
                    this.DislikeField = value;
                    this.RaisePropertyChanged("Dislike");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Like {
            get {
                return this.LikeField;
            }
            set {
                if ((this.LikeField.Equals(value) != true)) {
                    this.LikeField = value;
                    this.RaisePropertyChanged("Like");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MusicService.IMusicService")]
    public interface IMusicService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Login", ReplyAction="http://tempuri.org/IMusicService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/LoginMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Login", ReplyAction="http://tempuri.org/IMusicService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Logout", ReplyAction="http://tempuri.org/IMusicService/LogoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/LogoutMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        bool Logout(string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Logout", ReplyAction="http://tempuri.org/IMusicService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Add", ReplyAction="http://tempuri.org/IMusicService/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/AddMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        bool Add(string name, string link, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Add", ReplyAction="http://tempuri.org/IMusicService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string name, string link, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Delete", ReplyAction="http://tempuri.org/IMusicService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/DeleteMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        bool Delete(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Delete", ReplyAction="http://tempuri.org/IMusicService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Like", ReplyAction="http://tempuri.org/IMusicService/LikeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/LikeMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        bool Like(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Like", ReplyAction="http://tempuri.org/IMusicService/LikeResponse")]
        System.Threading.Tasks.Task<bool> LikeAsync(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/getLike", ReplyAction="http://tempuri.org/IMusicService/getLikeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/getLikeMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        System.Nullable<bool> getLike(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/getLike", ReplyAction="http://tempuri.org/IMusicService/getLikeResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> getLikeAsync(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Dislike", ReplyAction="http://tempuri.org/IMusicService/DislikeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/DislikeMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        bool Dislike(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/Dislike", ReplyAction="http://tempuri.org/IMusicService/DislikeResponse")]
        System.Threading.Tasks.Task<bool> DislikeAsync(uint musicID, string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/List", ReplyAction="http://tempuri.org/IMusicService/ListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.MusicService.MyException), Action="http://tempuri.org/IMusicService/ListMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Service")]
        Client.MusicService.Music[] List(string uID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicService/List", ReplyAction="http://tempuri.org/IMusicService/ListResponse")]
        System.Threading.Tasks.Task<Client.MusicService.Music[]> ListAsync(string uID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMusicServiceChannel : Client.MusicService.IMusicService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicServiceClient : System.ServiceModel.ClientBase<Client.MusicService.IMusicService>, Client.MusicService.IMusicService {
        
        public MusicServiceClient() {
        }
        
        public MusicServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string uID) {
            return base.Channel.Logout(uID);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string uID) {
            return base.Channel.LogoutAsync(uID);
        }
        
        public bool Add(string name, string link, string uID) {
            return base.Channel.Add(name, link, uID);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string name, string link, string uID) {
            return base.Channel.AddAsync(name, link, uID);
        }
        
        public bool Delete(uint musicID, string uID) {
            return base.Channel.Delete(musicID, uID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(uint musicID, string uID) {
            return base.Channel.DeleteAsync(musicID, uID);
        }
        
        public bool Like(uint musicID, string uID) {
            return base.Channel.Like(musicID, uID);
        }
        
        public System.Threading.Tasks.Task<bool> LikeAsync(uint musicID, string uID) {
            return base.Channel.LikeAsync(musicID, uID);
        }
        
        public System.Nullable<bool> getLike(uint musicID, string uID) {
            return base.Channel.getLike(musicID, uID);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> getLikeAsync(uint musicID, string uID) {
            return base.Channel.getLikeAsync(musicID, uID);
        }
        
        public bool Dislike(uint musicID, string uID) {
            return base.Channel.Dislike(musicID, uID);
        }
        
        public System.Threading.Tasks.Task<bool> DislikeAsync(uint musicID, string uID) {
            return base.Channel.DislikeAsync(musicID, uID);
        }
        
        public Client.MusicService.Music[] List(string uID) {
            return base.Channel.List(uID);
        }
        
        public System.Threading.Tasks.Task<Client.MusicService.Music[]> ListAsync(string uID) {
            return base.Channel.ListAsync(uID);
        }
    }
}
